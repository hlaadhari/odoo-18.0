# Script de v√©rification du module STEG
Write-Host "=== V√©rification du Module STEG ===" -ForegroundColor Green

$modulePath = ".\custom_addons\steg_stock_management"
$errors = @()
$warnings = @()

# V√©rifier la structure des dossiers
Write-Host "üìÅ V√©rification de la structure..." -ForegroundColor Blue

$requiredDirs = @(
    "$modulePath",
    "$modulePath\models",
    "$modulePath\views", 
    "$modulePath\security",
    "$modulePath\data",
    "$modulePath\static\description"
)

foreach ($dir in $requiredDirs) {
    if (Test-Path $dir) {
        Write-Host "‚úì $dir" -ForegroundColor Green
    } else {
        $errors += "‚ùå Dossier manquant: $dir"
    }
}

# V√©rifier les fichiers essentiels
Write-Host "`nüìÑ V√©rification des fichiers..." -ForegroundColor Blue

$requiredFiles = @(
    "$modulePath\__manifest__.py",
    "$modulePath\__init__.py",
    "$modulePath\models\__init__.py",
    "$modulePath\models\steg_division.py",
    "$modulePath\models\steg_product.py",
    "$modulePath\models\steg_stock_location.py",
    "$modulePath\models\steg_stock_picking.py",
    "$modulePath\security\steg_security.xml",
    "$modulePath\security\ir.model.access.csv",
    "$modulePath\data\steg_divisions_data.xml",
    "$modulePath\data\steg_locations_data.xml",
    "$modulePath\data\steg_categories_data.xml",
    "$modulePath\views\steg_division_views.xml",
    "$modulePath\views\steg_product_views.xml",
    "$modulePath\views\steg_stock_views.xml",
    "$modulePath\views\steg_picking_views.xml",
    "$modulePath\views\steg_menus.xml"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úì $(Split-Path $file -Leaf)" -ForegroundColor Green
    } else {
        $errors += "‚ùå Fichier manquant: $file"
    }
}

# V√©rifier la syntaxe du manifest
Write-Host "`nüîç V√©rification du manifest..." -ForegroundColor Blue
try {
    $manifestContent = Get-Content "$modulePath\__manifest__.py" -Raw
    if ($manifestContent -match "'name':" -and $manifestContent -match "'version':" -and $manifestContent -match "'depends':") {
        Write-Host "‚úì Manifest valide" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è Manifest potentiellement invalide"
    }
} catch {
    $errors += "‚ùå Erreur lors de la lecture du manifest"
}

# V√©rifier les d√©pendances Python
Write-Host "`nüêç V√©rification des imports Python..." -ForegroundColor Blue
$pythonFiles = Get-ChildItem -Path "$modulePath\models" -Filter "*.py" -Recurse

foreach ($file in $pythonFiles) {
    try {
        $content = Get-Content $file.FullName -Raw
        if ($content -match "from odoo import" -or $content -match "import odoo") {
            Write-Host "‚úì $($file.Name) - Imports Odoo OK" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è $($file.Name) - Pas d'imports Odoo d√©tect√©s"
        }
    } catch {
        $warnings += "‚ö†Ô∏è Erreur lors de la lecture de $($file.Name)"
    }
}

# V√©rifier les fichiers XML
Write-Host "`nüìã V√©rification des fichiers XML..." -ForegroundColor Blue
$xmlFiles = Get-ChildItem -Path $modulePath -Filter "*.xml" -Recurse

foreach ($file in $xmlFiles) {
    try {
        [xml]$xmlContent = Get-Content $file.FullName
        Write-Host "‚úì $($file.Name) - XML valide" -ForegroundColor Green
    } catch {
        $errors += "‚ùå $($file.Name) - XML invalide: $($_.Exception.Message)"
    }
}

# R√©sum√©
Write-Host "`nüìä R√âSUM√â DE LA V√âRIFICATION" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

if ($errors.Count -eq 0 -and $warnings.Count -eq 0) {
    Write-Host "üéâ PARFAIT ! Le module STEG est correctement structur√©" -ForegroundColor Green
    Write-Host "‚úÖ Pr√™t pour l'installation" -ForegroundColor Green
} elseif ($errors.Count -eq 0) {
    Write-Host "‚úÖ Module valide avec quelques avertissements" -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è $($warnings.Count) avertissement(s):" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "   $warning" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå ERREURS D√âTECT√âES - Correction n√©cessaire" -ForegroundColor Red
    Write-Host "üî¥ $($errors.Count) erreur(s):" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "   $error" -ForegroundColor Red
    }
    if ($warnings.Count -gt 0) {
        Write-Host "‚ö†Ô∏è $($warnings.Count) avertissement(s):" -ForegroundColor Yellow
        foreach ($warning in $warnings) {
            Write-Host "   $warning" -ForegroundColor Yellow
        }
    }
}

Write-Host "`nüìã Prochaines √©tapes:" -ForegroundColor Blue
if ($errors.Count -eq 0) {
    Write-Host "1. Ex√©cutez: .\install-steg-module.ps1" -ForegroundColor White
    Write-Host "2. Acc√©dez √† http://localhost:8069" -ForegroundColor White
    Write-Host "3. Connectez-vous et cherchez 'STEG' dans les Apps" -ForegroundColor White
} else {
    Write-Host "1. Corrigez les erreurs list√©es ci-dessus" -ForegroundColor White
    Write-Host "2. Relancez cette v√©rification" -ForegroundColor White
    Write-Host "3. Puis installez le module" -ForegroundColor White
}