# Script de diagnostic pour l'app STEG dans Odoo
Write-Host "=== DIAGNOSTIC APP STEG DANS ODOO ===" -ForegroundColor Green

# √âtape 1: V√©rifier que les services sont en cours d'ex√©cution
Write-Host "`n1Ô∏è‚É£ V√âRIFICATION DES SERVICES" -ForegroundColor Cyan
$containers = docker-compose -f docker-compose-simple.yml ps --services --filter "status=running"
if ($containers -contains "odoo" -and $containers -contains "db") {
    Write-Host "‚úÖ Services Odoo et PostgreSQL en cours d'ex√©cution" -ForegroundColor Green
} else {
    Write-Host "‚ùå Services non d√©marr√©s. Ex√©cutez: docker-compose -f docker-compose-simple.yml up -d" -ForegroundColor Red
    exit 1
}

# √âtape 2: V√©rifier la structure du module
Write-Host "`n2Ô∏è‚É£ V√âRIFICATION STRUCTURE MODULE" -ForegroundColor Cyan
$modulePath = ".\custom_addons\steg_stock_management"
if (Test-Path $modulePath) {
    Write-Host "‚úÖ Dossier module pr√©sent: $modulePath" -ForegroundColor Green
    
    # V√©rifier le manifest
    $manifestPath = "$modulePath\__manifest__.py"
    if (Test-Path $manifestPath) {
        Write-Host "‚úÖ Fichier __manifest__.py pr√©sent" -ForegroundColor Green
        
        # Lire le contenu du manifest
        try {
            $manifestContent = Get-Content $manifestPath -Raw
            if ($manifestContent -match "'installable':\s*True") {
                Write-Host "‚úÖ Module marqu√© comme installable" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Module non marqu√© comme installable" -ForegroundColor Red
            }
            
            if ($manifestContent -match "'application':\s*True") {
                Write-Host "‚úÖ Module marqu√© comme application" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è Module non marqu√© comme application" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Erreur lors de la lecture du manifest" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Fichier __manifest__.py manquant" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Dossier module non trouv√©: $modulePath" -ForegroundColor Red
    exit 1
}

# √âtape 3: V√©rifier que le module est dans le bon dossier custom_addons
Write-Host "`n3Ô∏è‚É£ V√âRIFICATION DOSSIER CUSTOM_ADDONS" -ForegroundColor Cyan
$customAddonsPath = ".\custom_addons"
if (Test-Path $customAddonsPath) {
    Write-Host "‚úÖ Dossier custom_addons pr√©sent" -ForegroundColor Green
    
    # Lister les modules dans custom_addons
    $modules = Get-ChildItem -Path $customAddonsPath -Directory
    Write-Host "üì¶ Modules dans custom_addons:" -ForegroundColor Blue
    foreach ($module in $modules) {
        if (Test-Path "$($module.FullName)\__manifest__.py") {
            Write-Host "  ‚úì $($module.Name)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è $($module.Name) (pas de manifest)" -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "‚ùå Dossier custom_addons non trouv√©" -ForegroundColor Red
}

# √âtape 4: V√©rifier les logs Odoo pour les erreurs de module
Write-Host "`n4Ô∏è‚É£ V√âRIFICATION LOGS ODOO" -ForegroundColor Cyan
Write-Host "üîç Recherche d'erreurs li√©es au module STEG..." -ForegroundColor Blue
try {
    $logs = docker-compose -f docker-compose-simple.yml logs --tail=50 odoo | Select-String -Pattern "steg|STEG|error|ERROR|exception|Exception"
    if ($logs) {
        Write-Host "‚ö†Ô∏è Messages trouv√©s dans les logs:" -ForegroundColor Yellow
        $logs | ForEach-Object { Write-Host "  $_" -ForegroundColor White }
    } else {
        Write-Host "‚úÖ Aucune erreur STEG trouv√©e dans les logs r√©cents" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Impossible de lire les logs" -ForegroundColor Red
}

# √âtape 5: V√©rifier la configuration Docker
Write-Host "`n5Ô∏è‚É£ V√âRIFICATION CONFIGURATION DOCKER" -ForegroundColor Cyan
try {
    # V√©rifier que custom_addons est mont√©
    $dockerConfig = docker-compose -f docker-compose-simple.yml config
    if ($dockerConfig -match "custom_addons" -or $dockerConfig -match "/mnt/extra-addons") {
        Write-Host "‚úÖ Dossier custom_addons mont√© dans le conteneur" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Dossier custom_addons non mont√© dans le conteneur" -ForegroundColor Red
        Write-Host "üí° V√©rifiez la configuration Docker" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de v√©rifier la configuration Docker" -ForegroundColor Yellow
}

# √âtape 6: Tester l'acc√®s au module depuis le conteneur
Write-Host "`n6Ô∏è‚É£ TEST ACC√àS MODULE DEPUIS CONTENEUR" -ForegroundColor Cyan
try {
    $moduleCheck = docker-compose -f docker-compose-simple.yml exec -T odoo ls -la /mnt/extra-addons/
    if ($moduleCheck -match "steg_stock_management") {
        Write-Host "‚úÖ Module visible depuis le conteneur Odoo" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Module non visible depuis le conteneur" -ForegroundColor Red
        Write-Host "üìÅ Contenu de /mnt/extra-addons/:" -ForegroundColor Blue
        Write-Host $moduleCheck -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Impossible d'acc√©der au conteneur" -ForegroundColor Red
}

# √âtape 7: Solutions recommand√©es
Write-Host "`n7Ô∏è‚É£ SOLUTIONS RECOMMAND√âES" -ForegroundColor Cyan

Write-Host "`nüîß SOLUTION 1: Red√©marrer Odoo" -ForegroundColor Yellow
Write-Host "docker-compose -f docker-compose-simple.yml restart odoo" -ForegroundColor White

Write-Host "`nüîß SOLUTION 2: Mettre √† jour la liste des apps" -ForegroundColor Yellow
Write-Host "1. Connectez-vous √† Odoo (http://localhost:8069)" -ForegroundColor White
Write-Host "2. Allez dans Apps" -ForegroundColor White
Write-Host "3. Cliquez sur 'Update Apps List' en haut √† droite" -ForegroundColor White
Write-Host "4. Attendez la mise √† jour" -ForegroundColor White
Write-Host "5. Recherchez 'STEG' dans la barre de recherche" -ForegroundColor White

Write-Host "`nüîß SOLUTION 3: Mode d√©veloppeur" -ForegroundColor Yellow
Write-Host "1. Connectez-vous √† Odoo" -ForegroundColor White
Write-Host "2. Allez dans Param√®tres" -ForegroundColor White
Write-Host "3. Activez le 'Mode d√©veloppeur'" -ForegroundColor White
Write-Host "4. Retournez dans Apps" -ForegroundColor White
Write-Host "5. Recherchez 'STEG'" -ForegroundColor White

Write-Host "`nüîß SOLUTION 4: Installation manuelle via base de donn√©es" -ForegroundColor Yellow
Write-Host "docker-compose -f docker-compose-simple.yml exec odoo odoo -d steg_stock -i steg_stock_management --stop-after-init" -ForegroundColor White

Write-Host "`nüîß SOLUTION 5: V√©rifier les d√©pendances" -ForegroundColor Yellow
Write-Host "Assurez-vous que ces modules sont install√©s:" -ForegroundColor White
Write-Host "- stock (Inventory)" -ForegroundColor White
Write-Host "- purchase (Purchase)" -ForegroundColor White
Write-Host "- sale (Sales)" -ForegroundColor White
Write-Host "- product (Product)" -ForegroundColor White

# √âtape 8: Script de test automatique
Write-Host "`n8Ô∏è‚É£ TEST AUTOMATIQUE" -ForegroundColor Cyan
Write-Host "üöÄ Ex√©cution du test automatique..." -ForegroundColor Blue

# Red√©marrer Odoo
Write-Host "üîÑ Red√©marrage d'Odoo..." -ForegroundColor Blue
docker-compose -f docker-compose-simple.yml restart odoo
Start-Sleep -Seconds 30

# Tester la connectivit√©
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8069" -TimeoutSec 15
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Odoo accessible apr√®s red√©marrage" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Odoo non accessible apr√®s red√©marrage" -ForegroundColor Red
}

Write-Host "`nüìã R√âSUM√â DU DIAGNOSTIC" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

Write-Host "`nüéØ PROCHAINES ACTIONS:" -ForegroundColor Yellow
Write-Host "1. Connectez-vous √† http://localhost:8069" -ForegroundColor White
Write-Host "2. Email: admin@steg.com.tn" -ForegroundColor White
Write-Host "3. Mot de passe: steg_admin_2024" -ForegroundColor White
Write-Host "4. Allez dans Apps ‚Üí Update Apps List" -ForegroundColor White
Write-Host "5. Recherchez 'STEG' ou 'stock'" -ForegroundColor White

Write-Host "`nüí° SI LE MODULE N'APPARA√éT TOUJOURS PAS:" -ForegroundColor Red
Write-Host "Ex√©cutez: docker-compose -f docker-compose-simple.yml exec odoo odoo -d steg_stock -i steg_stock_management --stop-after-init" -ForegroundColor White

$currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Write-Host "`n‚è∞ Diagnostic effectu√© le: $currentTime" -ForegroundColor Gray