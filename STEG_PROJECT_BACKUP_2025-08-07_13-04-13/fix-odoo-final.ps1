# Script final pour corriger Odoo STEG
Write-Host "=== Correction finale d'Odoo STEG ===" -ForegroundColor Green

# Arr√™ter tous les services et supprimer les volumes
Write-Host "‚èπÔ∏è Arr√™t complet et nettoyage..." -ForegroundColor Yellow
docker-compose -f docker-compose-simple.yml down -v

# Supprimer tous les scripts d'initialisation probl√©matiques
Write-Host "üßπ Nettoyage des scripts d'initialisation..." -ForegroundColor Blue
Remove-Item ".\database\init\*" -Force -ErrorAction SilentlyContinue

# Cr√©er un script d'initialisation minimal et propre
$cleanInitScript = @"
-- Script d'initialisation minimal pour PostgreSQL
-- Cr√©√© le $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

-- Cr√©er les extensions n√©cessaires pour Odoo
CREATE EXTENSION IF NOT EXISTS "unaccent";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Message de confirmation
\echo 'PostgreSQL initialis√© avec les extensions Odoo';
\echo 'Pr√™t pour la cr√©ation de bases de donn√©es Odoo';
"@

# √âcrire le script propre
$cleanInitScript | Out-File -FilePath ".\database\init\01-postgresql-extensions.sql" -Encoding UTF8

Write-Host "‚úì Script d'initialisation propre cr√©√©" -ForegroundColor Green

# D√©marrer les services
Write-Host "üöÄ D√©marrage des services..." -ForegroundColor Green
docker-compose -f docker-compose-simple.yml up -d

Write-Host "‚è≥ Attente du d√©marrage complet..." -ForegroundColor Blue
Start-Sleep -Seconds 35

# V√©rifier les logs d'Odoo
Write-Host "üìã V√©rification des logs d'Odoo..." -ForegroundColor Blue
$logs = docker-compose -f docker-compose-simple.yml logs --tail=5 odoo
Write-Host $logs

# Test de connectivit√© final
Write-Host "üîç Test de connectivit√© final..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8069" -TimeoutSec 15
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ SUCC√àS ! Odoo est accessible - Status: $($response.StatusCode)" -ForegroundColor Green
        $success = $true
    } else {
        Write-Host "‚ö†Ô∏è R√©ponse inattendue - Status: $($response.StatusCode)" -ForegroundColor Yellow
        $success = $false
    }
} catch {
    Write-Host "‚ùå Erreur de connectivit√©: $($_.Exception.Message)" -ForegroundColor Red
    $success = $false
}

if ($success) {
    Write-Host "`nüéâ ODOO STEG EST MAINTENANT FONCTIONNEL !" -ForegroundColor Green
    Write-Host "üåê Acc√©dez √†: http://localhost:8069" -ForegroundColor Cyan
    Write-Host "`nüìã √âtapes suivantes:" -ForegroundColor Yellow
    Write-Host "1. Ouvrez votre navigateur sur http://localhost:8069" -ForegroundColor White
    Write-Host "2. Cliquez sur 'Create Database'" -ForegroundColor White
    Write-Host "3. Utilisez ces param√®tres:" -ForegroundColor White
    Write-Host "   - Database Name: steg_stock" -ForegroundColor Cyan
    Write-Host "   - Email: admin@steg.com.tn" -ForegroundColor Cyan
    Write-Host "   - Password: steg_admin_2024" -ForegroundColor Cyan
    Write-Host "   - Language: French / Fran√ßais" -ForegroundColor Cyan
    Write-Host "   - Country: Tunisia" -ForegroundColor Cyan
    Write-Host "   - Demo data: No (d√©coch√©)" -ForegroundColor Cyan
    Write-Host "4. Cliquez sur 'Create Database' et patientez" -ForegroundColor White
    Write-Host "`nüíæ Apr√®s configuration:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Installez: Inventory, Sales, Purchase, Barcode" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Sauvegardez avec: .\backup-db.ps1" -ForegroundColor Cyan
} else {
    Write-Host "`n‚ùå Probl√®me persistant. V√©rifiez les logs:" -ForegroundColor Red
    Write-Host "docker-compose -f docker-compose-simple.yml logs odoo" -ForegroundColor Yellow
}