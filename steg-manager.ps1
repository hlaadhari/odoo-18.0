# STEG Manager - Script unique pour g√©rer tout le syst√®me STEG
# Version: 1.0.0
# Auteur: STEG - D√©veloppement Interne

param(
    [Parameter(Position=0)]
    [ValidateSet("start", "stop", "restart", "status", "install", "backup", "restore", "logs", "clean", "help", "update")]
    [string]$Action = $null
)
# Configuration
$ADDON_REPO_URL = "https://github.com/hlaadhari/steg_stock_management.git" # √Ä adapter si besoin
$ADDON_PATH = ".\custom_addons\steg_stock_management"
function Update-STEGAddon {
    Show-Header
    Write-ColorText "üîÑ MISE √Ä JOUR DE L'ADDON STEG" "Blue"

    if (-not (Test-ServicesRunning)) {
        Write-ColorText "‚ùå Services non d√©marr√©s. Utilisez: .\steg-manager.ps1 start" "Red"
        return
    }

    # Sauvegarde de l'ancien dossier
    $backupDir = ".\custom_addons\backup_steg_stock_management_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    if (Test-Path $ADDON_PATH) {
        Write-ColorText "üì¶ Sauvegarde de l'ancienne version..." "Yellow"
        Copy-Item $ADDON_PATH $backupDir -Recurse -Force
    }

    # Suppression de l'ancien dossier
    Remove-Item $ADDON_PATH -Recurse -Force -ErrorAction SilentlyContinue

    # Clonage du d√©p√¥t
    Write-ColorText "üåê T√©l√©chargement de la derni√®re version depuis le d√©p√¥t..." "Blue"
    git clone $ADDON_REPO_URL $ADDON_PATH
    if (-not (Test-Path $ADDON_PATH)) {
        Write-ColorText "‚ùå √âchec du t√©l√©chargement de l'addon." "Red"
        return
    }

    Write-ColorText "üîÑ Red√©marrage du serveur Odoo..." "Blue"
    docker-compose -f $COMPOSE_FILE restart odoo
    Start-Sleep -Seconds 20
    Write-ColorText "‚úÖ Addon mis √† jour et serveur red√©marr√© !" "Green"
}

# Configuration
$COMPOSE_FILE = "docker-compose-simple.yml"
$DB_NAME = "steg_stock"
$ADMIN_EMAIL = "admin@steg.com.tn"
$ADMIN_PASSWORD = "steg_admin_2024"
$ODOO_URL = "http://localhost:8069"

# Couleurs pour l'affichage
function Write-ColorText {
    param([string]$Text, [string]$Color = "White")
    switch ($Color) {
        "Red" { Write-Host $Text -ForegroundColor Red }
        "Green" { Write-Host $Text -ForegroundColor Green }
        "Yellow" { Write-Host $Text -ForegroundColor Yellow }
        "Blue" { Write-Host $Text -ForegroundColor Blue }
        "Cyan" { Write-Host $Text -ForegroundColor Cyan }
        "Magenta" { Write-Host $Text -ForegroundColor Magenta }
        default { Write-Host $Text -ForegroundColor White }
    }
}

function Show-Header {
    Write-ColorText "`n=== STEG MANAGER - Syst√®me de Gestion des Stocks ===" "Cyan"
    Write-ColorText "Version 1.0.0 - STEG Tunisie" "Gray"
    Write-ColorText "=" * 60 "Cyan"
}

function Test-DockerAvailable {
    try {
        $null = docker --version 2>$null
        return $true
    } catch {
        return $false
    }
}

function Test-ServicesRunning {
    try {
        $containers = docker-compose -f $COMPOSE_FILE ps --services --filter "status=running" 2>$null
        return ($containers -contains "odoo" -and $containers -contains "db")
    } catch {
        return $false
    }
}

function Start-STEGServices {
    Show-Header
    Write-ColorText "üöÄ D√âMARRAGE DES SERVICES STEG" "Green"
    
    if (-not (Test-DockerAvailable)) {
        Write-ColorText "‚ùå Docker n'est pas disponible" "Red"
        Write-ColorText "Installez Docker Desktop et red√©marrez" "Yellow"
        return
    }
    
    Write-ColorText "üì¶ D√©marrage des conteneurs..." "Blue"
    docker-compose -f $COMPOSE_FILE up -d
    
    Write-ColorText "‚è≥ Attente de l'initialisation..." "Blue"
    Start-Sleep -Seconds 30
    
    # V√©rifier l'√©tat
    if (Test-ServicesRunning) {
        Write-ColorText "‚úÖ Services d√©marr√©s avec succ√®s !" "Green"
        Write-ColorText "üåê Interface Odoo: $ODOO_URL" "Cyan"
        Write-ColorText "üìß Email: $ADMIN_EMAIL" "White"
        Write-ColorText "üîê Mot de passe: $ADMIN_PASSWORD" "White"
        
        # Test de connectivit√©
        try {
            $response = Invoke-WebRequest -Uri $ODOO_URL -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
                Write-ColorText "‚úÖ Interface web accessible" "Green"
            }
        } catch {
            Write-ColorText "‚ö†Ô∏è Interface web non encore pr√™te, patientez..." "Yellow"
        }
    } else {
        Write-ColorText "‚ùå Erreur lors du d√©marrage" "Red"
        Show-Logs
    }
}

function Stop-STEGServices {
    Show-Header
    Write-ColorText "‚èπÔ∏è ARR√äT DES SERVICES STEG" "Yellow"
    
    docker-compose -f $COMPOSE_FILE down
    Write-ColorText "‚úÖ Services arr√™t√©s" "Green"
}

function Restart-STEGServices {
    Show-Header
    Write-ColorText "üîÑ RED√âMARRAGE DES SERVICES STEG" "Blue"
    
    docker-compose -f $COMPOSE_FILE restart
    Start-Sleep -Seconds 20
    
    if (Test-ServicesRunning) {
        Write-ColorText "‚úÖ Services red√©marr√©s avec succ√®s !" "Green"
    } else {
        Write-ColorText "‚ùå Erreur lors du red√©marrage" "Red"
    }
}

function Show-Status {
    Show-Header
    Write-ColorText "üìä STATUT DU SYST√àME STEG" "Cyan"
    
    # Docker
    if (Test-DockerAvailable) {
        Write-ColorText "‚úÖ Docker: Disponible" "Green"
    } else {
        Write-ColorText "‚ùå Docker: Non disponible" "Red"
        return
    }
    
    # Services
    if (Test-ServicesRunning) {
        Write-ColorText "‚úÖ Services: En cours d'ex√©cution" "Green"
        
        # Afficher les conteneurs
        Write-ColorText "`nüì¶ CONTENEURS:" "Blue"
        docker-compose -f $COMPOSE_FILE ps
        
        # Test connectivit√©
        try {
            $response = Invoke-WebRequest -Uri $ODOO_URL -TimeoutSec 5
            Write-ColorText "‚úÖ Interface web: Accessible ($($response.StatusCode))" "Green"
        } catch {
            Write-ColorText "‚ùå Interface web: Non accessible" "Red"
        }
        
        # V√©rifier la base de donn√©es
        try {
            $dbCheck = docker-compose -f $COMPOSE_FILE exec -T db psql -U odoo -d $DB_NAME -c "SELECT current_database();" 2>$null
            if ($dbCheck -match $DB_NAME) {
                Write-ColorText "‚úÖ Base de donn√©es: Op√©rationnelle" "Green"
            } else {
                Write-ColorText "‚ö†Ô∏è Base de donn√©es: Non initialis√©e" "Yellow"
            }
        } catch {
            Write-ColorText "‚ùå Base de donn√©es: Erreur de connexion" "Red"
        }
        
        # V√©rifier le module STEG
        $moduleCheck = docker-compose -f $COMPOSE_FILE exec -T odoo ls -la /mnt/extra-addons/ 2>$null
        if ($moduleCheck -match "steg_stock_management") {
            Write-ColorText "‚úÖ Module STEG: Visible" "Green"
        } else {
            Write-ColorText "‚ùå Module STEG: Non visible" "Red"
        }
        
    } else {
        Write-ColorText "‚ùå Services: Arr√™t√©s" "Red"
    }
    
    Write-ColorText "`nüéØ ACC√àS RAPIDE:" "Yellow"
    Write-ColorText "üåê URL: $ODOO_URL" "White"
    Write-ColorText "üìß Email: $ADMIN_EMAIL" "White"
    Write-ColorText "üîê Mot de passe: $ADMIN_PASSWORD" "White"
}

function Install-STEGModule {
    Show-Header
    Write-ColorText "üì¶ INSTALLATION MODULE STEG" "Green"
    
    if (-not (Test-ServicesRunning)) {
        Write-ColorText "‚ùå Services non d√©marr√©s. Utilisez: .\steg-manager.ps1 start" "Red"
        return
    }
    
    Write-ColorText "üîç V√©rification du module..." "Blue"
    $moduleCheck = docker-compose -f $COMPOSE_FILE exec -T odoo ls -la /mnt/extra-addons/
    if ($moduleCheck -match "steg_stock_management") {
        Write-ColorText "‚úÖ Module STEG trouv√©" "Green"
    } else {
        Write-ColorText "‚ùå Module STEG non trouv√© dans custom_addons" "Red"
        return
    }
    
    Write-ColorText "`nüìã INSTALLATION VIA INTERFACE WEB:" "Yellow"
    Write-ColorText "1. Ouvrez: $ODOO_URL" "White"
    Write-ColorText "2. Connectez-vous: $ADMIN_EMAIL / $ADMIN_PASSWORD" "White"
    Write-ColorText "3. Apps ‚Üí Update Apps List" "White"
    Write-ColorText "4. Recherchez 'STEG'" "White"
    Write-ColorText "5. Installez 'STEG - Gestion Stock Pi√®ces de Rechange'" "White"
    
    Write-ColorText "`nüîß INSTALLATION AUTOMATIQUE:" "Blue"
    $choice = Read-Host "Tenter l'installation automatique ? (o/n)"
    
    if ($choice -eq "o" -or $choice -eq "O") {
        try {
            Write-ColorText "üöÄ Installation en cours..." "Blue"
            docker-compose -f $COMPOSE_FILE exec -T odoo odoo -d $DB_NAME -i steg_stock_management --stop-after-init
            Write-ColorText "üîÑ Red√©marrage..." "Blue"
            docker-compose -f $COMPOSE_FILE restart odoo
            Start-Sleep -Seconds 20
            Write-ColorText "‚úÖ Installation termin√©e !" "Green"
        } catch {
            Write-ColorText "‚ö†Ô∏è Installation automatique √©chou√©e, utilisez l'interface web" "Yellow"
        }
    }
}

function Backup-Database {
    Show-Header
    Write-ColorText "üíæ SAUVEGARDE BASE DE DONN√âES" "Green"
    
    if (-not (Test-ServicesRunning)) {
        Write-ColorText "‚ùå Services non d√©marr√©s" "Red"
        return
    }
    
    # Cr√©er le dossier de sauvegarde
    $backupDir = ".\database\backups"
    if (-not (Test-Path $backupDir)) {
        New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    }
    
    $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
    $backupFile = "$backupDir\steg_backup_$timestamp.sql"
    
    Write-ColorText "üì¶ Cr√©ation de la sauvegarde..." "Blue"
    try {
        docker-compose -f $COMPOSE_FILE exec -T db pg_dumpall -U odoo > $backupFile
        
        if (Test-Path $backupFile) {
            $fileSize = (Get-Item $backupFile).Length
            if ($fileSize -gt 1KB) {
                Write-ColorText "‚úÖ Sauvegarde cr√©√©e: $backupFile" "Green"
                Write-ColorText "üìä Taille: $([math]::Round($fileSize/1KB, 2)) KB" "Cyan"
            } else {
                Write-ColorText "‚ö†Ô∏è Fichier de sauvegarde vide" "Yellow"
            }
        }
    } catch {
        Write-ColorText "‚ùå Erreur lors de la sauvegarde: $($_.Exception.Message)" "Red"
    }
}

function Restore-Database {
    Show-Header
    Write-ColorText "üì• RESTAURATION BASE DE DONN√âES" "Green"
    
    $backupDir = ".\database\backups"
    if (-not (Test-Path $backupDir)) {
        Write-ColorText "‚ùå Aucune sauvegarde trouv√©e" "Red"
        return
    }
    
    $backups = Get-ChildItem -Path $backupDir -Filter "*.sql" | Sort-Object LastWriteTime -Descending
    if ($backups.Count -eq 0) {
        Write-ColorText "‚ùå Aucun fichier de sauvegarde trouv√©" "Red"
        return
    }
    
    Write-ColorText "üìÅ Sauvegardes disponibles:" "Blue"
    for ($i = 0; $i -lt $backups.Count; $i++) {
        Write-ColorText "  [$($i+1)] $($backups[$i].Name) - $($backups[$i].LastWriteTime)" "White"
    }
    
    $choice = Read-Host "`nChoisissez une sauvegarde (1-$($backups.Count))"
    if ($choice -match '^\d+$' -and [int]$choice -le $backups.Count -and [int]$choice -gt 0) {
        $selectedBackup = $backups[[int]$choice - 1]
        
        Write-ColorText "‚ö†Ô∏è ATTENTION: Cette op√©ration va remplacer toutes les donn√©es actuelles !" "Yellow"
        $confirm = Read-Host "Continuer ? (oui/non)"
        
        if ($confirm -eq "oui") {
            Write-ColorText "‚èπÔ∏è Arr√™t des services..." "Blue"
            docker-compose -f $COMPOSE_FILE down -v
            
            Write-ColorText "üöÄ Red√©marrage..." "Blue"
            docker-compose -f $COMPOSE_FILE up -d
            Start-Sleep -Seconds 30
            
            Write-ColorText "üì• Restauration en cours..." "Blue"
            try {
                Get-Content $selectedBackup.FullName | docker-compose -f $COMPOSE_FILE exec -T db psql -U odoo
                Write-ColorText "‚úÖ Restauration termin√©e !" "Green"
            } catch {
                Write-ColorText "‚ùå Erreur lors de la restauration" "Red"
            }
        }
    }
}

function Show-Logs {
    Show-Header
    Write-ColorText "üìã LOGS DU SYST√àME" "Cyan"
    
    if (-not (Test-ServicesRunning)) {
        Write-ColorText "‚ùå Services non d√©marr√©s" "Red"
        return
    }
    
    Write-ColorText "üìä Logs Odoo (20 derni√®res lignes):" "Blue"
    docker-compose -f $COMPOSE_FILE logs --tail=20 odoo
    
    Write-ColorText "`nüìä Logs PostgreSQL (10 derni√®res lignes):" "Blue"
    docker-compose -f $COMPOSE_FILE logs --tail=10 db
}

function Clean-System {
    Show-Header
    Write-ColorText "üßπ NETTOYAGE DU SYST√àME" "Yellow"
    
    Write-ColorText "‚ö†Ô∏è Cette op√©ration va:" "Yellow"
    Write-ColorText "‚Ä¢ Arr√™ter tous les services" "White"
    Write-ColorText "‚Ä¢ Supprimer tous les conteneurs" "White"
    Write-ColorText "‚Ä¢ Supprimer tous les volumes (DONN√âES PERDUES !)" "Red"
    Write-ColorText "‚Ä¢ Nettoyer les images Docker inutilis√©es" "White"
    
    $confirm = Read-Host "`n√ätes-vous s√ªr ? Tapez 'SUPPRIMER' pour confirmer"
    
    if ($confirm -eq "SUPPRIMER") {
        Write-ColorText "üõë Arr√™t et suppression..." "Red"
        docker-compose -f $COMPOSE_FILE down -v --remove-orphans
        docker system prune -f
        Write-ColorText "‚úÖ Nettoyage termin√©" "Green"
    } else {
        Write-ColorText "‚ùå Nettoyage annul√©" "Yellow"
    }
}

function Show-Help {
    Show-Header
    Write-ColorText "üìñ AIDE - STEG MANAGER" "Cyan"
    
    Write-ColorText "`nüéØ COMMANDES DISPONIBLES:" "Yellow"
    Write-ColorText "  start     - D√©marrer les services STEG" "White"
    Write-ColorText "  stop      - Arr√™ter les services" "White"
    Write-ColorText "  restart   - Red√©marrer les services" "White"
    Write-ColorText "  status    - Afficher le statut du syst√®me" "White"
    Write-ColorText "  install   - Installer le module STEG" "White"
    Write-ColorText "  backup    - Sauvegarder la base de donn√©es" "White"
    Write-ColorText "  restore   - Restaurer une sauvegarde" "White"
    Write-ColorText "  logs      - Afficher les logs" "White"
    Write-ColorText "  clean     - Nettoyer compl√®tement le syst√®me" "White"
    Write-ColorText "  help      - Afficher cette aide" "White"
    
    Write-ColorText "`nüí° EXEMPLES D'UTILISATION:" "Blue"
    Write-ColorText "  .\steg-manager.ps1 start" "Cyan"
    Write-ColorText "  .\steg-manager.ps1 status" "Cyan"
    Write-ColorText "  .\steg-manager.ps1 backup" "Cyan"
    
    Write-ColorText "`nüåê ACC√àS SYST√àME:" "Green"
    Write-ColorText "  URL: $ODOO_URL" "White"
    Write-ColorText "  Email: $ADMIN_EMAIL" "White"
    Write-ColorText "  Mot de passe: $ADMIN_PASSWORD" "White"
    
    Write-ColorText "`nüìã WORKFLOW RECOMMAND√â:" "Yellow"
    Write-ColorText "1. .\steg-manager.ps1 start" "White"
    Write-ColorText "2. .\steg-manager.ps1 install" "White"
    Write-ColorText "3. Configurer via l'interface web" "White"
    Write-ColorText "4. .\steg-manager.ps1 backup" "White"
}


# Menu interactif si aucune action n'est pass√©e
if (-not $Action) {
    Show-Header
    Write-ColorText "Veuillez choisir une action :" "Yellow"
    Write-ColorText "  1. start     - D√©marrer les services STEG" "White"
    Write-ColorText "  2. stop      - Arr√™ter les services" "White"
    Write-ColorText "  3. restart   - Red√©marrer les services" "White"
    Write-ColorText "  4. status    - Afficher le statut du syst√®me" "White"
    Write-ColorText "  5. install   - Installer le module STEG" "White"
    Write-ColorText "  6. backup    - Sauvegarder la base de donn√©es" "White"
    Write-ColorText "  7. restore   - Restaurer une sauvegarde" "White"
    Write-ColorText "  8. logs      - Afficher les logs" "White"
    Write-ColorText "  9. clean     - Nettoyer compl√®tement le syst√®me" "White"
    Write-ColorText " 10. update    - Mettre √† jour l'addon STEG en ligne" "White"
    Write-ColorText " 11. help      - Afficher l'aide" "White"
    $choice = Read-Host "Entrez le num√©ro de l'action souhait√©e"
    switch ($choice) {
        "1" { $Action = "start" }
        "2" { $Action = "stop" }
        "3" { $Action = "restart" }
        "4" { $Action = "status" }
        "5" { $Action = "install" }
        "6" { $Action = "backup" }
        "7" { $Action = "restore" }
        "8" { $Action = "logs" }
        "9" { $Action = "clean" }
        "10" { $Action = "update" }
        "11" { $Action = "help" }
        default { $Action = "help" }
    }
}

switch ($Action.ToLower()) {
    "start" { Start-STEGServices }
    "stop" { Stop-STEGServices }
    "restart" { Restart-STEGServices }
    "status" { Show-Status }
    "install" { Install-STEGModule }
    "backup" { Backup-Database }
    "restore" { Restore-Database }
    "logs" { Show-Logs }
    "clean" { Clean-System }
    "update" { Update-STEGAddon }
    "help" { Show-Help }
    default { Show-Help }
}

Write-ColorText "`n" "White"